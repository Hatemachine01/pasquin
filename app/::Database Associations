//Database Associations
	
	User - Has_many Post
		 - Has_many comments  
	UserAdmin - Single Table inherance 


	Post - Belongs_to User
		 - Has_many Comments


	Comments - Belongs_to Post
			 - Belongs_to User
	
//Attributes 

	User - First_name
		   Last_name
		   Email
		   type


    Post - Title
    	   Body
    	   Likes/Dislikes
    	   Date

    Comments - Body


//GEMS

Device
FB login
administrate
Bootstrap
Gritter






rails g devise User first_name:string last_name:string email:string type:string


//STEPS TO GET OFF THE GROUND
1. Create new rails app with --database=postgresql
   Delete test unit framework since we are gonna use Rspec	

2. Push App to Github

3. Install Rspec and Capybara 
	
	  gem 'rspec-rails'
	  gem 'capybara'
	  gem 'database_cleaner'
	  gem 'byebug'
3.1
	Run bundle
	rails generate rspec:install
	update spec_helper with :

			require 'spec_helper'
			ENV['RAILS_ENV'] ||= 'test'
			require File.expand_path('../../config/environment', __FILE__)
			# Prevent database truncation if the environment is production
			abort("The Rails environment is running in production mode!") if Rails.env.production?
			require 'rspec/rails'

			ActiveRecord::Migration.maintain_test_schema!

			RSpec.configure do |config|
			  # Remove this line if you're not using ActiveRecord or ActiveRecord fixtures
			  config.fixture_path = "#{::Rails.root}/spec/fixtures"


			  config.use_transactional_fixtures = true

			 
			  config.infer_spec_type_from_file_location!


			  config.filter_rails_from_backtrace!
			  config.include FactoryGirl::Syntax::Methods 

			end


4. Test static- page to test testing system
	4.1 mkdir spec/features
	4.2 touch spec/features/static_spec.rb
	4.3 paste :

		require 'rails_helper'

		describe 'navigate' do
		  describe 'homepage' do
		    it 'can be reached successfully' do
		      visit root_path
		      expect(page.status_code).to eq(200)
		    end
		  end
		end



//MONDAY JAN 29

1. FIX DEVICE RSPEC ISSUE BY ADDING ALERTS TO APPLICATION.HTML.RB
	
http://guides.railsgirls.com/devise

	missing  : adding alerts to application.html.erb

	<p class="notice"><%= notice %></p>
	<p class="alert"><%= alert %></p>

2. Create model for Posts using resource
	rails g resource Post title:string body:text like:integer date:date user:references

3. Add validations for Posts using TDD

4. Add DB association using TD 

5. Create Default likes method for Post so that it is easier to change it later on.
	1. Add the method following to Post model

		after_initialize :set_defaults


  private

    def set_defaults
      self.likes ||= 0
    end



// Wednesday Jan 31

â€‹0.5 Implement length validations for first_name and last_name for User

1.Implement Comment Model

	Rails g resource Comment body:text  post:references

3.Implement DB associations through TDD
	
	Belongs_to Post

4.Implement Validations through TDD
	Validate body

5.Install FactoryGirl and refactor test for all Models
	https://rails.devcamp.com/ruby-gem-walkthroughs/testing-gems/factory-girl-rails
	5.1 gem factorygirl-rails
	5.2. Add factorygirl to rails helpers
	5.3 create factory files
	5.4 refactor all tests to include factoryGirl



//Saturday Feb 03

1. Implement CRUD for Posts through TDD
   1.1 touch spec/features/post_spec.rb
   1.2 test for form in new_post_path
   1.3 Whitelist Parameters in Controller

2. Include before_action authenticate! in Post Controller


//Sunday Feb 4

1. Finish Implemeting CRUD (Delete Function)

2. Install Pundint GEM for permission controls
	2.1 gem 'pundint'
	2.2 rails g pundit:install
	2.3 Include Pundit in application_controller.rb
	2.4 create post_policy.rb 
	2.5 Make it inheret from ApplicationPolicy
	2.6 edit feature
		
		def update?
		record.user_id == user.id
		end
	
	2.7 Edit controller
		
		def edit
		authorize @post
		end

		def update
		authorize @post
		//////////
		end

	2.8 Write Tests for this function

		  Add non_authorize user to our Factory



		 it 'cannot be edited by a non authorized user' do
      		logout(:user)
      		non_authorized_user = FactoryGirl.create(:non_authorized_user)
      		login_as(non_authorized_user, :scope => :user)

      		visit edit_post_path(post)

      		expect(current_path).to eq(root_path)
    	 
    	 end

    2.9 Implement Redirect to error page

    	2.1  include pundit rescue in application controller

    		 rescue_from Pundit::NotAuthorizedError, with: :user_not_authorized

    		 private

			  def user_not_authorized
			    flash[:alert] = "You are not authorized to perform this action."
			    redirect_to(root_path)
			  end
			end


//Monday Feb 19, 2018

Implement INDEX html + Javascript

// To-do


	Check Pundit documentation
	Check User Permissions



//Monday Feb 26

Add Notification system [DONE]
Facebook Login [DONE]
SKIP VALIDATIONS WITH FB LOGIN [DONE]
Implement Comments Logic [DONE]
Depurar Template [DONE]
Review Post show permissions to allow non-logged users to read post [DONE]
Decide what content will be shown when logged/not-logged [DONE]
Show page should not include Post buttom [DONE]
Create page should not include like buttom
Implement Create view  [DONE]
Check strong parameters for Post [DONE]

//Weds Feb 28

Images not being used : placeholder_leaderboard
						comment_avatar


//March 6 2018

Implement Tag System [DONE]
Consider implementing depend on destroy for when posts are deleted so that association gets deleted as well [DONE]
Test 
Test Javier




//March 27 2019

1.Add dislikes attribute to DB
	1.		rails generate migration AddDislikesToPosts     dislikes:integer
	1.2		Set default amount


2. Add bootstrap button to show post's dislikes and likes with AJAX
	1.1

	<button type="button" class="btn btn-primary">Primary <span class="badge">7</span></button>

	1.2 Active Ajax functioning 
		remote: true

	1.3 Put button in partial. Create js.erb file and render partial from there
